!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t),r.d(t,"cTeacher",(function(){return p})),r.d(t,"cpp",(function(){return l})),r.d(t,"java",(function(){return s})),r.d(t,"react",(function(){return h}));var n,o=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.getRequirements=function(){return"Here is the list of requirements for Cpp"},t.prototype.getAvailableTeacher=function(){return void 0!==this.teacher.experienceTeachingC?"No available teacher":"Available Teacher: "+this.teacher.firstName},t}(Subjects.Subject),u=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(t,r)};return function(t,r){function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.getRequirements=function(){return"Here is the list of requirements for Java"},t.prototype.getAvailableTeacher=function(){return void 0!==this.teacher.experienceTeachingJava?"No available teacher":"Available Teacher: "+this.teacher.firstName},t}(Subjects.Subject),a=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(t,r)};return function(t,r){function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.getRequirements=function(){return"Here is the list of requirements for React"},t.prototype.getAvailableTeacher=function(){return void 0!==this.teacher.experienceTeachingReact?"No available teacher":"Available Teacher: "+this.teacher.firstName},t}(Subjects.Subject),p={firstName:"John",lastName:"Doe",experienceTeachingC:10},l=new i(p),s=new c(p),h=new f(p);l.getRequirements(),l.getAvailableTeacher(),s.getRequirements(),s.getAvailableTeacher(),h.getRequirements(),h.getAvailableTeacher()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,